#!/bin/bash
# Generic bash options which I always use for safety. Not all may be needed for this particular script.
set -o nounset
set -o pipefail
set -o errexit
set -o errtrace
trap 'echo "Error at line $LINENO, exit code is $?" >&2' ERR
shopt -s nullglob
shopt -s failglob

if [ $# -ne 2 ] ; then
	echo "This is a wrapper around kdesu to fix its lack of properly setting all environment variables and initializing all of KDE." >&2
	echo "" >&2
	echo "Syntax: $0 USER COMMAND" >&2
	echo "Passing arguments to the COMMAND is NOT supported!" >&2
	exit 1
fi

user="$1"
program="$2"

if [ "$(whoami)" != "$user" ] ; then
	# See $ man kdesu
	kdesu="$(kde4-config --path libexec)"kdesu
	
	# -n not only to avoid saving passwords but also to ensure the kdesu daemon isn't started:
	# This script intends to ensure that no processes spawned by it keep running once the launched program has exited.
	#
	# Reason for the user check in the passed bash script even though we already checked here:
	# If the user presses the "ignore" button when being asked for a password kdesu will run the program as the current user.
	# Thus we must check if we are the target user before running ourselves to avoid a fork bomb.
	"$kdesu" -n -u "$user" -t -c "bash -xc 'realuser=\$(whoami) && [ \"\$realuser\" = \"$user\" ] && \"$0\" \"$user\" \"$program\"'"
else
	# The following environment variables which kdesu doesn't deal with were obtained by:
	# 	set | fgrep UID_OF_CALLING_USER
	# 	set | fgrep NAME_OF_CALLING_USER
	# where the "calling user" is the user which called kdesu. So these variables should be adjusted to refer to $user's stuff instead.
	# Some were also determined by watching output of kontact for errors.
	
	export GS_LIB="/home/$user/.fonts"
	# See $ man pam_systemd
	# FIXME: Ensure the directory is the same as in the previous call to fully adhere to the specification
	export XDG_RUNTIME_DIR="$(mktemp --directory)"
	export KDE_SESSION_UID="$UID"
	export GPG_AGENT_INFO=
	export PAM_KWALLET_LOGIN=
	export PAM_KWALLET5_LOGIN=
	# FIXME: Is $PATH valid or is the one of the calling user inherited?
	
	# FIXME: kontact will crash on new user acccounts due to lack of initializing the system configuration cache
	# Run the following as the target user before launching the program:
	#	kbuildsyscoca4 # Use --incremental ?
	#	kbuildsyscoca5 # Use --incremental ?
	
	# TODO: Firefox once complained about not being able to create a dconf
	# dir in some /tmp dir. Unable to reproduce it unfortunately.
	# Is it necessary to create it? And is it really in the XDG_RUNTIME_DIR?
	#	mkdir "$(XDG_RUNTIME_DIR)/dconf"
	
	# E.g. chromium-browser will fail to launch dbus on its own and print
	# errors so we start it manually.
	# Fortunately dbus offers a tool "dbus-launch" whose manpage sounds
	# like it is intended to start dbus for the sole purpose of using
	# a program with it, just what we want to do.
	dbus-launch --exit-with-x11 "$program"
	# FIXME: $ man dbus-launch says:
	# "If you run dbus-launch myapp (with any other options), dbus-daemon
	# will not exit when myapp terminates: this is because myapp is assumed
	# to be part of a larger session, rather than a session in its own right."
	# -> How to tell dbus to shutdown when no more programs are using it?
	
	# FIXME: chromium-browser startup is slow due to a timeout:
	# 	Failed to call method: org.freedesktop.Notifications.GetCapabilities:
	# 	object_path= /org/freedesktop/Notifications:
	# 	org.freedesktop.DBus.Error.NoReply: Did not receive a reply.[...]
	# This possibly is because there is no notification widget running in the
	# target user: https://bbs.archlinux.org/viewtopic.php?id=236020
fi
